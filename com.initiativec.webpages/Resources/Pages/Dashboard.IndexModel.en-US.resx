<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="A Lehmon Brothers é o projeto socio-viral da memecoin $LEMON que quer construir a maior memecoin não animal da Cardano. Eles utilizam mecanismos virais pensados com ajuda de inteligência artificial para distribuição de $LEMON, quebrando a barreira da adoção e incentivando pessoas e resevarem tokens para que serão usados pela comunidade. Entrar é de graça mas é preciso de um convite que é limitado. Não há o que perder, mas, se o $LEMON se tornar uma das grandes memecoins da Cardano, cada $LEMON poderá valer muito. Se você já deixou passar alguma oportunidade de entrar em projetos anteriormente, não vai querr perder essa, ainda mais podendo reservar de graça. Aqui está o meu link de convite: {0}\n\nEste link deixará de funcionar quando meus convites acabarem. Avise-me depois que você entrar, porque eu preciso aprovar a sua entrada na comunidade através da minha conta." xml:space="preserve">
    <value>Lehmon Brothers is the socio-viral project of the memecoin $LEMON that aims to build the largest non-animal memecoin on Cardano. They use viral mechanisms designed with the help of artificial intelligence for the distribution of $LEMON, breaking the barrier of adoption and encouraging people to reserve tokens that will be used by the community. Joining is free, but you need an invitation that is limited. There’s nothing to lose, but if $LEMON becomes one of the major memecoins of Cardano, each $LEMON could be worth a lot. If you’ve missed out on opportunities to join projects before, you don’t want to miss this one, especially since you can reserve for free. Here is my invitation link: {0}\n\nThis link will stop working when my invites run out. Let me know after you join because I need to approve your entry into the community through my account.</value>
  </data>
  <data name="Aprovar" xml:space="preserve">
    <value>Approve</value>
  </data>
  <data name="Convide pessoas que você conhece pessoalmente e garanta um adicional de &lt;b&gt;$LEMON {0}&lt;/b&gt;" xml:space="preserve">
    <value>Invite people you know personally and secure an additional &lt;b&gt;$LEMON {0}&lt;/b&gt;</value>
  </data>
  <data name="COPIAR LINK" xml:space="preserve">
    <value>COPY LINK</value>
  </data>
  <data name="Olá, {0}, bem-vindo a (em breve) maior memecoin da Cardano!" xml:space="preserve">
    <value>Hello, {0}, welcome to (coming soon) the largest memecoin on Cardano!</value>
  </data>
  <data name="Ou compartilhar com:" xml:space="preserve">
    <value>Or share with:</value>
  </data>
  <data name="Pelos próximos {0} dias voce pode convidar e verificar até {1} pessoas e garantir $LEMON {2} por cada. Com o seu convite, eles também poderão reservar $LEMON com antecedência e ajudar a expandir nossa comunidade" xml:space="preserve">
    <value>For the next {0} days, you can invite and verify up to {1} people and secure $LEMON {2} for each. With your invite, they will also be able to reserve $LEMON in advance and help expand our community.</value>
  </data>
  <data name="Reprovar" xml:space="preserve">
    <value>Disapprove</value>
  </data>
  <data name="Reservadas" xml:space="preserve">
    <value>Reserved</value>
  </data>
  <data name="Saldo Atual" xml:space="preserve">
    <value>Current Balance</value>
  </data>
  <data name="Tarefa Atual" xml:space="preserve">
    <value>Current Task</value>
  </data>
  <data name="Tarefas Futuras" xml:space="preserve">
    <value>Future Tasks</value>
  </data>
  <data name="Você tem {0} amigos para revisar, e você já aprovou {1} num total de {2} convites disponíveis." xml:space="preserve">
    <value>You have {0} friends to review, and you have already approved {1} out of {2} available invitations.</value>
  </data>
</root>